C51 COMPILER V9.56.0.0   PROJECT2                                                          12/12/2017 19:28:06 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PROJECT2
OBJECT MODULE PLACED IN .\Objects\project2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE project2.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -project2.lst) TABS(2) OBJECT(.\Objects\project2.obj)

line level    source

   1          // Jonic Mecija, Project 2, 014467048
   2          // Steven Phan , Project 2, 014358810
   3          
   4          // contains the memory locations of the registers 
   5          #include <reg51.h>
   6          
   7          #define ldata P2
   8          #define COMMAND 0
   9          #define LCD_DATA 1
  10          
  11          // LCD variable declaration
  12          sbit rs = P3^6;//P1^0;  
  13          sbit rw = P3^5;//P1^1; 
  14          sbit en = P3^7;//P1^2; brown
  15          
  16          // Port 1 is for the LEDS
  17          sbit green   = P1^5;
  18          sbit yellow  = P1^6;
  19          sbit red     = P1^7;
  20          
  21          sbit laser = P1^2;
  22          sbit alarm = P1^0;
  23          sbit a1  =  P0^1;
  24          sbit a2  =  P0^2;
  25          
  26          // connected to DB7 on the LCD
  27          sbit busy = P2^7;
  28          
  29          // mode control
  30          sbit mode = P0^0;
  31          
  32          unsigned int j;
  33          
  34          // encoder pins for rotation direction
  35          sbit pinA = P3^2;
  36          sbit pinB = P1^3;
  37          
  38          // variables for counter
  39          unsigned char lsb = 0x30; //lsb
  40          unsigned char msb = 0x30; //msb
  41          
  42          // dummy variables for the arm count
  43          unsigned char msb2 = 0x30;
  44          unsigned char lsb2 = 0x30;
  45          
  46          // FUNCTION DECLARATIONS
  47          
  48          // mode functions
  49          void displayTimer();
  50          void startTimer();
  51          void countDown(unsigned char msb, unsigned char lsb);
  52          void led_status(unsigned char msb, unsigned char lsb);
  53          void intruder();
  54          void laserOn(unsigned char msb, unsigned char lsb);
C51 COMPILER V9.56.0.0   PROJECT2                                                          12/12/2017 19:28:06 PAGE 2   

  55          
  56          // LCD functions
  57          void init_lcdhold();
  58          void write_to_lcd(unsigned char value, bit mode);
  59          void lcdready(void);
  60          
  61          // timing functions
  62          void _25msDelay();
  63          void second();
  64          void half_();
  65          
  66          
  67          // trying things out here
  68          void armed ();
  69          void intruding();
  70          void arm_Count();
  71          void intrude( unsigned char msb, unsigned char lsb );
  72          
  73          unsigned int flag = 0;
  74          unsigned int someone = 0;
  75          
  76          /******************************************************
  77          *
  78          *  MAIN FUNCTION    MAIN FUNCTION   MAIN FUNCTION
  79          *
  80          *******************************************************/
  81          void main()
  82          {
  83   1        lsb = 0x37;  // set lsb to display 7
  84   1        P0 = 0xFF;   // declaring P0 as input port
  85   1        TMOD = 0x01; // timer 0, mode 1
  86   1        IE = 0x85;   // IE register EX0 and EX1
  87   1        IT1 = 1;     // enable external EX1 triggered by falling edge signal
  88   1        IT0 = 1;     // enable external EX0 triggered by falling edge signal
  89   1        
  90   1        alarm =0;
  91   1        laser = 0;
  92   1        a1 = 0;
  93   1        a2 = 0;
  94   1        
  95   1        red = 0;
  96   1        yellow  = 0;
  97   1        green = 0;
  98   1        
  99   1        while(1)
 100   1          {
 101   2            
 102   2            // disamred mode display timer
 103   2            if ( mode == 0 )
 104   2              {
 105   3                // display initial timer in disarmed state
 106   3                displayTimer();
 107   3              }
 108   2            // arm and count down
 109   2            else if ( mode == 1 )
 110   2              {
 111   3                // start counting down in armed state
 112   3                startTimer();
 113   3              }
 114   2            
 115   2          } 
 116   1          
C51 COMPILER V9.56.0.0   PROJECT2                                                          12/12/2017 19:28:06 PAGE 3   

 117   1      } // end main
 118          /******************************************************
 119          *
 120          *  INTERRUPTS   INTERRUPTS    INTERRUPTS    INTERRUPTS
 121          *
 122          *******************************************************/
 123          
 124          // interrupts current mode and sets mode according to pins
 125          
 126          void changeTimer() interrupt 0 //P3.2
 127          { 
 128   1       // change the mode so that it goes to DISARMED state
 129   1       // if encoder is turned clock wise
 130   1          if ( ( pinA == 0 )  && ( pinB == 1 ) ) 
 131   1          {
 132   2            // if the LSB is 9 increment MSB
 133   2            if ( ( lsb == 0x39 ) && ( msb == 0x39 ) )
 134   2            {
 135   3              write_to_lcd(0x87, COMMAND);
 136   3              write_to_lcd(lsb,   LCD_DATA);
 137   3              
 138   3              write_to_lcd(0x86, COMMAND);
 139   3              write_to_lcd(msb,   LCD_DATA);
 140   3            }
 141   2            else
 142   2            {
 143   3              if ( lsb == 0x39 )    
 144   3                {
 145   4                  lsb = 0x30;
 146   4                  msb += 0x01;
 147   4                }
 148   3              // else increment the LSB
 149   3              else 
 150   3                {
 151   4                  lsb += 0x01;
 152   4                }
 153   3              
 154   3                // update the MSB and LSB on the LCD 
 155   3                write_to_lcd(0x87, COMMAND);
 156   3                write_to_lcd(lsb,   LCD_DATA);
 157   3                
 158   3                write_to_lcd(0x86, COMMAND);
 159   3                write_to_lcd(msb,   LCD_DATA);
 160   3            }
 161   2          }
 162   1          
 163   1       // if encoder is turned counter clock wise
 164   1          if ( (pinA == 0)  && (pinB == 0) )
 165   1          {
 166   2            // if the display is "07"
 167   2            if ( ( lsb == 0x37 ) && ( msb == 0x30 ) )
 168   2            {
 169   3              write_to_lcd(0x87, COMMAND);
 170   3              write_to_lcd(lsb,   LCD_DATA);
 171   3              
 172   3              write_to_lcd(0x86, COMMAND);
 173   3              write_to_lcd(msb,   LCD_DATA);
 174   3            }
 175   2            else
 176   2            {
 177   3            // if the LSB is 0 decrement the MSB
 178   3            if ( lsb == 0x30 )    
C51 COMPILER V9.56.0.0   PROJECT2                                                          12/12/2017 19:28:06 PAGE 4   

 179   3              {
 180   4                lsb = 0x39;
 181   4                msb -= 0x01;
 182   4              }
 183   3            // else decrement the LSB
 184   3            else 
 185   3              {
 186   4                lsb -= 0x01;
 187   4              }
 188   3            
 189   3              // update the MSB and LSB on the LCD
 190   3              write_to_lcd(0x87, COMMAND);
 191   3              write_to_lcd(lsb,   LCD_DATA);
 192   3              
 193   3              write_to_lcd(0x86, COMMAND);
 194   3              write_to_lcd(msb,   LCD_DATA);
 195   3            }
 196   2          }
 197   1      }
 198          
 199          
 200          //INTERRPUT FOR THE INTRUDER GOES HERE:
 201          void stranger() interrupt 2 //P3.3
 202          {
 203   1        if (flag == 1){
 204   2          arm_Count();
 205   2        }
 206   1      }
 207          
 208          void intrude( unsigned char msb, unsigned char lsb )
 209          {
 210   1        
 211   1      if ( ( msb == 0x30 ) && ( lsb == 0x30 ) && (mode =1))
 212   1        {
 213   2        unsigned char i = 0;
 214   2        unsigned char code intrude[]= "INTRUDER!!!";  
 215   2        
 216   2        alarm = 1;
 217   2          write_to_lcd(0xC0, COMMAND);
 218   2        
 219   2            while (intrude[i]!='\0') 
 220   2              write_to_lcd(intrude[i++],LCD_DATA);
 221   2            
 222   2            while(1);
 223   2          }
 224   1        else if ( ( msb == 0x30 ) && ( lsb == 0x30 ) && (mode =1))
 225   1        {
 226   2          main();
 227   2        }
 228   1      
 229   1        
 230   1      }
 231          
 232          
 233          /******************************************************
 234          *
 235          *       MODES     MODES     MODES       MODES
 236          *
 237          *******************************************************/
 238          
 239          // displays the timer prompt, calls countdown()
 240          void startTimer()
C51 COMPILER V9.56.0.0   PROJECT2                                                          12/12/2017 19:28:06 PAGE 5   

 241          {
 242   1        while(1)
 243   1        {
 244   2          unsigned char code msg[]="Timer:   seconds";  
 245   2          unsigned char i = 0;
 246   2          
 247   2          unsigned char code msg1[]= "Armed"; 
 248   2          unsigned char k = 0;
 249   2          
 250   2          init_lcdhold(); 
 251   2      
 252   2          
 253   2          // writes " Timer: xx seconds " quickly
 254   2          while (msg[i]!='\0') 
 255   2           write_to_lcd(msg[i++],LCD_DATA);
 256   2          
 257   2          // move cursor to second row
 258   2          write_to_lcd(0xC0, COMMAND);
 259   2          
 260   2          // writes " Armed "
 261   2          while (msg1[k]!='\0') 
 262   2           write_to_lcd(msg1[k++],LCD_DATA);
 263   2          
 264   2          // call the counter function
 265   2          countDown(msb, lsb);
 266   2          
 267   2          // holds display
 268   2          while((1) && (mode == 1));
 269   2        }
 270   1      }
 271          
 272          // only displays the timer prompt
 273          void displayTimer()
 274          {
 275   1          unsigned char code msg[]= "Timer:07 seconds"; 
 276   1          unsigned char i = 0;
 277   1        
 278   1          unsigned char code msg0[]= "Disarmed";  
 279   1          unsigned char x = 0;
 280   1          
 281   1          init_lcdhold();          
 282   1          msb = 0x30;
 283   1          lsb = 0x37;
 284   1          // writes " Timer: xx seconds " 
 285   1          while (msg[i]!='\0') 
 286   1           write_to_lcd(msg[i++],LCD_DATA);
 287   1        
 288   1          write_to_lcd(0xC0, COMMAND);
 289   1      
 290   1          while (msg0[x]!='\0') 
 291   1           write_to_lcd(msg0[x++],LCD_DATA);
 292   1          
 293   1          while((1) && (mode == 0));
 294   1      }
 295          
 296          // count down from the inputted value 
 297          void countDown(unsigned char msb, unsigned char lsb)
 298          {
 299   1        while (mode == 1){
 300   2        // create variables to assign to parameters
 301   2        unsigned char M = msb;
 302   2        unsigned char L = lsb;
C51 COMPILER V9.56.0.0   PROJECT2                                                          12/12/2017 19:28:06 PAGE 6   

 303   2      
 304   2        // display the initial value paramaters
 305   2        write_to_lcd(0x87, COMMAND);
 306   2        write_to_lcd(L,   LCD_DATA);
 307   2              
 308   2        write_to_lcd(0x86, COMMAND);
 309   2        write_to_lcd(M,   LCD_DATA);
 310   2        
 311   2        // while display is " 00 "
 312   2        while( ( M >= 0x30 ) && ( L >= 0x30 ) && (mode == 1) )
 313   2          {
 314   3              // if display is " x0 "
 315   3              if ( ( L == 0x30 ) && ( M != 0x30 ) && (mode == 1) )    
 316   3                {
 317   4                  // reset LSB to 9 AND decrement MSB
 318   4                  L = 0x39;
 319   4                  M -= 0x01;
 320   4                  
 321   4                  // update the MSB and LSB on the LCD
 322   4                  second();
 323   4                  write_to_lcd(0x87, COMMAND);
 324   4                  write_to_lcd(L,   LCD_DATA);
 325   4            
 326   4                  write_to_lcd(0x86, COMMAND);
 327   4                  write_to_lcd(M,   LCD_DATA);
 328   4                }
 329   3                
 330   3              // if display is not " x0 "
 331   3              else if ( L != 0x30 && (mode == 1) )
 332   3                {
 333   4                  // decrement LSB only
 334   4                  L -= 0x01;
 335   4                  
 336   4                  // update the MSB and LSB on the LCD
 337   4                  second();
 338   4                  write_to_lcd(0x87, COMMAND);
 339   4                  write_to_lcd(L,   LCD_DATA);
 340   4                          
 341   4                  write_to_lcd(0x86, COMMAND);
 342   4                  write_to_lcd(M,   LCD_DATA);
 343   4                }
 344   3                
 345   3              // if display is " 00 " then keep display at " 00 "
 346   3              else if ( ( M == 0 ) && ( L == 0 ) && (mode == 1) )
 347   3              {
 348   4                  write_to_lcd(0x87, COMMAND);
 349   4                  write_to_lcd(0x30,   LCD_DATA);
 350   4                          
 351   4                  write_to_lcd(0x86, COMMAND);
 352   4                  write_to_lcd(0x30,   LCD_DATA);
 353   4              } 
 354   3              else if (mode ==0)
 355   3              {
 356   4                //main();
 357   4                displayTimer();
 358   4              }
 359   3              
 360   3              
 361   3              led_status(M, L);
 362   3              laserOn(M, L);
 363   3          }
 364   2        } 
C51 COMPILER V9.56.0.0   PROJECT2                                                          12/12/2017 19:28:06 PAGE 7   

 365   1          main();
 366   1      }
 367          
 368          void laserOn( unsigned char msb, unsigned char lsb )
 369          {
 370   1        if ( ( msb == 0x30 ) && ( lsb == 0x30 ) )
 371   1        {
 372   2          laser = 1;
 373   2          second();
 374   2          flag = 1;
 375   2          
 376   2            a1 = 1;
 377   2            a2 = 0;
 378   2            half_();
 379   2            a1 = 0;
 380   2            a2 = 1;
 381   2        }
 382   1      }
 383          
 384          void led_status(unsigned char msb, unsigned char lsb)
 385          {
 386   1              if ((msb > 0x30) && (lsb >=7))
 387   1              {
 388   2                green = 1;
 389   2                yellow = 0;
 390   2                red = 0;
 391   2              }
 392   1              if ( ( msb == 0x30) && (lsb < 0x37) && (lsb > 0x33) )
 393   1              {
 394   2                green = 0; 
 395   2                yellow = 1;
 396   2                red = 0;
 397   2              }
 398   1              if (( msb == 0x30) && (lsb <= 0x33) && (lsb != 0x37))
 399   1              {
 400   2                green = 0;
 401   2                yellow = 0;
 402   2                red  = 1;
 403   2              }
 404   1      }
 405          
 406          // countdown after its tripped
 407          void arm_Count()
 408          {
 409   1        while (mode == 1){
 410   2        // create variables to assign to parameters
 411   2        unsigned char M = msb;
 412   2        unsigned char L = lsb;
 413   2      
 414   2        // display the initial value paramaters
 415   2        write_to_lcd(0x87, COMMAND);
 416   2        write_to_lcd(L,   LCD_DATA);
 417   2              
 418   2        write_to_lcd(0x86, COMMAND);
 419   2        write_to_lcd(M,   LCD_DATA);
 420   2        
 421   2        // while display is " 00 "
 422   2        while( ( M >= 0x30 ) && ( L >= 0x30 ) && (mode == 1) )
 423   2          {
 424   3              // if display is " x0 "
 425   3              if ( ( L == 0x30 ) && ( M != 0x30 ) && (mode == 1) )    
 426   3                {
C51 COMPILER V9.56.0.0   PROJECT2                                                          12/12/2017 19:28:06 PAGE 8   

 427   4                  // reset LSB to 9 AND decrement MSB
 428   4                  L = 0x39;
 429   4                  M -= 0x01;
 430   4                  
 431   4                  // update the MSB and LSB on the LCD
 432   4                  second();
 433   4                  write_to_lcd(0x87, COMMAND);
 434   4                  write_to_lcd(L,   LCD_DATA);
 435   4            
 436   4                  write_to_lcd(0x86, COMMAND);
 437   4                  write_to_lcd(M,   LCD_DATA);
 438   4                }
 439   3                
 440   3              // if display is not " x0 "
 441   3              else if ( L != 0x30 && (mode == 1) )
 442   3                {
 443   4                  // decrement LSB only
 444   4                  L -= 0x01;
 445   4                  
 446   4                  // update the MSB and LSB on the LCD
 447   4                  second();
 448   4                  write_to_lcd(0x87, COMMAND);
 449   4                  write_to_lcd(L,   LCD_DATA);
 450   4                          
 451   4                  write_to_lcd(0x86, COMMAND);
 452   4                  write_to_lcd(M,   LCD_DATA);
 453   4                }
 454   3                
 455   3              // if display is " 00 " then keep display at " 00 "
 456   3              else if ( ( M == 0 ) && ( L == 0 ) && (mode == 1) )
 457   3              {
 458   4                  write_to_lcd(0x87, COMMAND);
 459   4                  write_to_lcd(0x30,   LCD_DATA);
 460   4                          
 461   4                  write_to_lcd(0x86, COMMAND);
 462   4                  write_to_lcd(0x30,   LCD_DATA);
 463   4              } 
 464   3              else if (mode ==0)
 465   3              {
 466   4                //main();
 467   4                displayTimer();
 468   4              }
 469   3              
 470   3              
 471   3              led_status(M, L);
 472   3              intrude(M, L);
 473   3          }
 474   2        } 
 475   1          main();
 476   1      }
 477          /********************************************************
 478          *
 479          *   LCD FUNCTIONS     LCD FUNCTIONS     LCD FUNCTIONS
 480          *
 481          *********************************************************/
 482          void write_to_lcd(unsigned char value, bit mode)
 483          {
 484   1        lcdready();
 485   1        ldata = value; 
 486   1        rs = mode; // set for data, reset for command
 487   1        rw = 0;
 488   1        en = 1;
C51 COMPILER V9.56.0.0   PROJECT2                                                          12/12/2017 19:28:06 PAGE 9   

 489   1        en = 0;
 490   1      }
 491          
 492          void lcdready(void)
 493          {
 494   1        busy = 1;
 495   1        en = 1;
 496   1        rs = 0; // It's a command
 497   1        rw = 1; // It's a read command
 498   1        
 499   1        while (busy) 
 500   1          {
 501   2            en = 0;
 502   2            _25msDelay();
 503   2            en = 1;
 504   2          }
 505   1        en=0;
 506   1        rw=0;
 507   1      }
 508          
 509          // setup LCD for the required display 
 510          void init_lcdhold()
 511          {
 512   1        // Function set format: 001 DL N F  * *
 513   1        // Function set value: 00111000
 514   1        // DL=1, use 8-bit data bus; N=1,1/16 duty(2 lines),
 515   1        // F=0, 5x7 dot character font 
 516   1        write_to_lcd(0x38,COMMAND); 
 517   1                                    
 518   1        // Display On/Off Control format: 00001 D C B
 519   1        // Display On/Off Control value: 00001110
 520   1        // D=1, display on; C=1, cursor on; B=0, cursor blink off
 521   1        write_to_lcd(0x0E,COMMAND);
 522   1      
 523   1        // Entry mode set format: 000001 I/D S
 524   1        // Entry mode set value: 00000110
 525   1        // I/D=1, Increment cursor position; S=0, no display shift
 526   1        write_to_lcd(0x06,COMMAND);
 527   1      
 528   1        // Clear display and returns cursor to the home position(address 0) 
 529   1        write_to_lcd(0x01,COMMAND);
 530   1      }
 531          
 532          
 533          /********************************************************
 534          *
 535          * TIMING DELAYS     TIMING DELAYS     TIMING DELAYS
 536          *
 537          *********************************************************/
 538          
 539          
 540          // timing delay for half a second
 541          void second()
 542          {
 543   1          for ( j = 0; j < 40; j++)
 544   1          {
 545   2            _25msDelay();
 546   2          }
 547   1      }
 548          void half_()
 549          {
 550   1        for ( j = 0; j < 20; j++)
C51 COMPILER V9.56.0.0   PROJECT2                                                          12/12/2017 19:28:06 PAGE 10  

 551   1          {
 552   2            _25msDelay();
 553   2          }
 554   1      }
 555          
 556          // timing delay for 
 557          void _25msDelay()
 558          {
 559   1          TL0 = 0xFF;
 560   1          TH0 = 0xA5;
 561   1          TR0 = 1;
 562   1          while ( TF0 == 0 );
 563   1          TR0 = 0;
 564   1          TF0 = 0;
 565   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1074    ----
   CONSTANT SIZE    =     61    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
